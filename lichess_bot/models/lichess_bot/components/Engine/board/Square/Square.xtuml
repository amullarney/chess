// BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

within lichess_bot::components::Engine::board is

  //! One of the 64 squares on a chessboard.
  @key_letters("Square");
  @class_num(1);
  class Square is

    //! A 2-character string which matches the numbered rank and alpha (a to h) files used by lichess.
    lichess_desig: string;

    rank: integer;

    file: integer;

    //! Create the chessboard, designating each of the 64 squares to match lichess.
    @dialect("oal");
    @operation_num(1);
    class operation initialize() is
      @noparse
      ranks[7] = "8";
      ranks[6] = "7";
      ranks[5] = "6";
      ranks[4] = "5";
      ranks[3] = "4";
      ranks[2] = "3";
      ranks[1] = "2";
      ranks[0] = "1";
      
      files[7] = "h";
      files[6] = "g";
      files[5] = "f";
      files[4] = "e";
      files[3] = "d";
      files[2] = "c";
      files[1] = "b";
      files[0] = "a";
      
      r = 0;
      while (r < 8)
        f = 0;
        while (f < 8)
          create object instance sq of Square;
          sq.rank = r + 1;
          sq.file = f + 1;
          sq.lichess_desig = files[f] + ranks[r];
          f = f + 1;
          // at initialization, all squares are empty
          create object instance opsq of OpenSquare;
          relate opsq to sq across R1;
        end while;
        r = r + 1;
      end while;
      @endnoparse
    end operation;

    @dialect("oal");
    @operation_num(2);
    operation occupant() return instance of Piece is
      @noparse
      select one piece related by self->OccupiedSquare[R1]->Piece[R2.'is occupied by'];
      return piece;
      @endnoparse
    end operation;

    @dialect("oal");
    @operation_num(3);
    operation occupy(piece: in instance of Piece) is
      @noparse
      // place a piece on a square on the board.
      // note: this can be used to place a piece immediately after a capture.
      piece = param.piece;
      select any ocsq from instances of OccupiedSquare where false;
      select one opsq related by self->OpenSquare[R1];
      if (not empty opsq)
        unrelate opsq from self across R1;
        delete object instance opsq;
        create object instance ocsq of OccupiedSquare;
        relate self to ocsq across R1;
      else
        select one ocsq related by self->OccupiedSquare[R1];
        select one occupant related by ocsq->Piece[R2.'is occupied by'];
        if (not_empty occupant)
          LOG::LogFailure( message:"Oops - square is already occupied " + self.lichess_desig );
        end if;
      end if;
      relate piece to ocsq across R2.'occupies';
      @endnoparse
    end operation;

  end class;

end;
