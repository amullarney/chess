// BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

within lichess_bot::components::Engine is

  //! Maintains a representation of the chessboard and piece placement and movement.
  package board is
    class EvaluatingMove;
    class Move;
    class OccupiedSquare;
    class OpenSquare;
    class Piece;
    class PieceSpecification;
    class Player;
    class PotentialMove;
    class Square;
    //! Every square is either occupied or not.
    relationship R1 is Square is_a (OccupiedSquare, OpenSquare);

    //! A piece still in play must occupy a square.
    //! Taken pieces no longer do so and cannot play.
    relationship R2 is OccupiedSquare conditionally 'is occupied by' one Piece,
                       Piece conditionally occupies one OccupiedSquare;

    relationship R4 is Piece unconditionally 'is specified by' one PieceSpecification,
                       PieceSpecification conditionally 'defines properties of' many Piece;

    //! A legal move describes how a piece may move from its occupied square to another square.
    relationship R5 is OccupiedSquare unconditionally targets one Square,
                       Square unconditionally vacates one OccupiedSquare
                       using one Move;

    //! At his turn, a player must choose one the allowed moves for one of his pieces.
    relationship R6 is Move unconditionally 'is playable by' one Player,
                       Player conditionally 'can play' many Move;

    relationship R7 is Piece unconditionally 'belongs to' one Player,
                       Player unconditionally owns many Piece;

    //! A symmetric association reflecting that two players compete against each other.
    relationship R8 is Player unconditionally opposes one Player,
                       Player unconditionally relates to one Player;

    relationship R9 is Move unconditionally 'is made by' one Piece,
                       Piece conditionally 'can make' many Move;

    //! Hypothesizing the execution of a move may open possibilities of opponent moves otherwise not available.
    relationship R10 is EvaluatingMove conditionally 'engenders in response' many PotentialMove,
                        PotentialMove conditionally 'is hypothetical response to' one EvaluatingMove;

    relationship R11 is Move is_a (EvaluatingMove, PotentialMove);

  end package;

end;
