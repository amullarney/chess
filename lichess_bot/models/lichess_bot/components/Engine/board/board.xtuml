// BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

within lichess_bot::components::Engine is

  //! Maintains a representation of the chessboard and piece placement and movement.
  package board is
    class EvaluatingMove;
    class Move;
    class OccupiedSquare;
    class OpenSquare;
    class Piece;
    class PieceSpecification;
    class Player;
    class PotentialMove;
    class Square;
    //! Every square is either occupied or not.
    relationship R1 is Square is_a (OccupiedSquare, OpenSquare);

    //! A piece still in play must occupy a square.
    //! Taken pieces no longer do so and cannot play.
    relationship R2 is OccupiedSquare conditionally 'is occupied by' one Piece,
                       Piece conditionally occupies one OccupiedSquare;

    relationship R4 is Piece unconditionally 'is specified by' one PieceSpecification,
                       PieceSpecification conditionally 'defines properties of' many Piece;

    //! A legal move defines how a piece may move from its occupied square to another square.
    //! The 'from' square must, obviously, be occupied initially by the piece making the move.
    //! That piece may be able to reach more than one square (multiplicity) or none! (conditionality).
    //! A destination square, in turn, may be reachable by more than one piece - or none, also.
    relationship R5 is OccupiedSquare conditionally targets many Square,
                       Square conditionally vacates many OccupiedSquare
                       using one Move;

    //! At his turn, a player must choose one the allowed moves for one of his pieces.
    relationship R6 is Move unconditionally 'is playable by' one Player,
                       Player conditionally 'can play' many Move;

    relationship R7 is Piece unconditionally 'belongs to' one Player,
                       Player unconditionally owns many Piece;

    //! A symmetric association reflecting that two players compete against each other.
    relationship R8 is Player unconditionally opposes one Player,
                       Player unconditionally relates to one Player;

    relationship R9 is Move unconditionally 'is made by' one Piece,
                       Piece conditionally 'can make' many Move;

    //! Hypothesizing the execution of a move may open possibilities of opponent moves otherwise not available.
    //! Such moves are only valid in the context of the hypothesized move and must be removed at the end of evalution.
    //! Additionally, if concurrent evaluation of moves is supported, care must be taken that these moves do not
    //! participate in any evaluation other than the one which engendered them.
    relationship R10 is EvaluatingMove conditionally 'engenders in response' many PotentialMove,
                        PotentialMove conditionally 'is hypothetical response to' one EvaluatingMove;

    relationship R11 is Move is_a (EvaluatingMove, PotentialMove);

    relationship R12 is Move unconditionally evaluates one Player,
                        Player conditionally 'waits for' many Move;

    //! To support possible concurrent evaluation of proposed moves, it is necessary to ensure that only those
    //! moves which remain valid in the context of a specific evaluation participate. This association marks
    //! those moves which, while retained as shared ground truth, should not be included in the evaluation.
    relationship R13 is EvaluatingMove conditionally invalidates many Move,
                        Move conditionally 'is invalidated by' one EvaluatingMove;

  end package;

end;
