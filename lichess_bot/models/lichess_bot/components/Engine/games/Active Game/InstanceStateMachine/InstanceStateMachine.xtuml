// BP 7.1.6 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

within lichess_bot::components::Engine::games::'Active Game' is

  @state_num(1);
  @dialect("oal");
  state created;

  @state_num(3);
  @dialect("oal");
  state 'game over';

  @state_num(4);
  @dialect("oal");
  state 'our turn';

  @state_num(5);
  @dialect("oal");
  state 'their turn';

  @state_num(6);
  @dialect("oal");
  state 'playing move';

  @state_num(7);
  @dialect("oal");
  state 'claiming victory';

  @event_num(1);
  event 'waiting on move';

  @event_num(2);
  event 'game over'(status: in GameStatus);

  @event_num(3);
  event 'play move'(move: in string);

  @event_num(4);
  event 'ready to play';

  @event_num(5);
  event 'claim victory';

  state model is

    |                    | 'waiting on move'  | 'game over'        | 'play move'        | 'ready to play'    | 'claim victory'    |
    | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
    | created            | 'their turn'       | cannot_happen      | cannot_happen      | 'our turn'         | ignore             |
    | 'game over'        | ignore             | cannot_happen      | ignore             | ignore             | ignore             |
    | 'our turn'         | ignore             | 'game over'        | 'playing move'     | 'our turn'         | 'claiming victory' |
    | 'their turn'       | ignore             | 'game over'        | ignore             | 'our turn'         | 'claiming victory' |
    | 'playing move'     | 'their turn'       | 'game over'        | cannot_happen      | ignore             | 'claiming victory' |
    | 'claiming victory' | ignore             | 'game over'        | ignore             | ignore             | ignore             |

  end state model;

  state 'game over'(status: in GameStatus) is
    @noparse
    LOG::LogInfo(message:"Game: " + self.id + ": Game over!");
    r = TIM::timer_cancel(timer_inst_ref: self.claim_victory_timer);
    self.dispose();
    @endnoparse
  end state;

  state 'our turn' is
    @noparse
    // handle takeback proposals
    if (self.color == Color::WHITE and self.game_state.btakeback) or
    	(self.color == Color::BLACK and self.game_state.wtakeback) then
    	self.handle_takeback_proposal();
    end if;
    
    // handle draw offers
    if (self.color == Color::WHITE and self.game_state.bdraw) or
    	(self.color == Color::BLACK and self.game_state.wdraw) then
    	self.handle_draw_offer();
    end if;
    
    select one player related by self->Player[R22.'is acting for'];
    if (empty player)
    	select any player from instances of Player
    	 where ( selected.Color == self.color );
    	relate self to player across R22.'is acting for';
    end if;
    
    select one opponent related by self->Player[R22.'is acting for']->Player[R8.'opposes'];
    played_moves = self.game_state.moves;
    legal_moves = ChessLib::legalMoves(fen: ChessLib::movesToFEN(initialFen: self.initial_fen, moves: played_moves));
    
    ourmove = "";  // until we choose..
    select any move from instances of Move where false;
    
    i = played_moves.length;
      
    if (self.color == Color::WHITE)
      if (i == 0)  // first move? - open with King pawn.. or, TBD, pick an opening strategy
        ourmove = "e2e4";
      end if;
    end if;
    
    select any opfrom from instances of OccupiedSquare where false;
    select any opto from instances of Square where false;
    if (i > 0)
      movestr = played_moves[i-1];  // most recent from opponent
      opfrom = ::from_square( movestr:movestr );
      opto = ::to_square( movestr:movestr );
      ::record_move( from:opfrom, to:opto, recorder:"player" );
    end if;
    
    // start: a simplistic attempt to choose a move based on high-value target.
    
    n = legal_moves.length - 1;
    
    // clean any move instances that are no longer legal
    select many potentialmoves related by self->Player[R22.'is acting for']->Move[R6.'considers'];
    for each potentialmove in potentialmoves
      select one start related by potentialmove->Piece[R5.'is reachable by']
                                                ->OccupiedSquare[R2.'occupies']
                                                ->Square[R1];
      select one finish related by potentialmove->Square[R5.'can legally move to'];
      movestr = ::movestr( from:start, to:finish );
    	i = 0;
    	while (i < n)  // for each legal move we could play...
    	  if (movestr == legal_moves[i])
    	    break;
    	  end if;
    	  i = i + 1;
    	end while;
    	if (i == n)
    	  potentialmove.dispose();
    	end if;
    end for;
    
    // ensure that a move instance exists for each legal move
    i = 0;
    while (i < n)  // for each legal move we could play...
      movestr = legal_moves[i];
      from = ::from_square( movestr:movestr );
      to = ::to_square( movestr:movestr );
      select one piece related by from->Piece[R2.'is occupied by'];
      select many dests related by piece->Square[R5.'can legally move to'];
      found = false;
      for each dest in dests
        if (dest == to)
          found = true;
          break;
        end if;
      end for;
      if (not found)
        create object instance m of Move;
        m.Notation = movestr;  // for debug
        relate piece to to across R5 using m;
      end if; 
      i = i + 1;
    end while;
    
    // sanity check
    select many moves from instances of Move;
    if (cardinality moves != n)
      LOG::LogInfo(message: "Oops - non matched moves");
    end if;
    
    // now we have bona-fide set of legal Move instances
    // let's pick the 'interesting' ones - those that have a value target
    
    select many potentialtargets related by self->Player[R22.'is acting for']
                                                 ->Player[R8.'opposes']
                                                  ->Piece[R7.'owns']
                                                   ->OccupiedSquare[R2.'occupies'];
    select many reachables related by self->Player[R22.'is acting for']
                                           ->Move[R6.'considers']
                                            ->Square[R5.'can legally move to']
                                             ->OccupiedSquare[R1];
    targets = potentialtargets & reachables;
    
    // now, targets is a set of squares occupied by opponent pieces
     
    best = 0;
    select many possible_moves from instances of Move;
    for each possible in possible_moves
      if (possible.Value > best)
        ourmove = possible.Notation;
        best = possible.Value;
      end if;
      delete object instance possible;
    end for; 
    
    if (ourmove == "")
      select any move from instances of Move;
      if (not_empty move)
        ourmove = move.Notation;
        LOG::LogInfo(message: "No good move found; playing safe " + ourmove); 
      else
    	  // select a random legal move
    	  i = 0;  // coerce integer
    	  i = TIM::current_clock() % legal_moves.length;
    	  ourmove = legal_moves[i];
    	  LOG::LogInfo(message: "Picking random move! " + ourmove); 
      end if;
    end if;
    
    from = ::from_square( movestr:ourmove );
    to = ::to_square( movestr:ourmove );
    ::record_move( from:from, to:to, recorder:" BOT: " );  // record for ground truth
    
    // play the move
    create event instance e of ActiveGame3:'play move'(move: ourmove) to self;
    
    
    t = TIM::timer_start(event_inst:e, microseconds: 0);
    @endnoparse
  end state;

  state 'playing move'(move: in string) is
    @noparse
    move = param.move;
    
    // play the move
    success = chess::move(game_id: self.id, move: move);
    if success then
    	generate ActiveGame1:'waiting on move' to self;
    else
      LOG::LogFailure(message: "Failed to make move.");
      create event instance e of ActiveGame4:'ready to play' to self;
      t = TIM::timer_start(event_inst: e, microseconds: 100000);  // short delay to slow down endless loop possibility
    end if;
    @endnoparse
  end state;

  state 'claiming victory' is
    @noparse
    r = chess::claimVictory(game_id: self.id);
    @endnoparse
  end state;

end;
